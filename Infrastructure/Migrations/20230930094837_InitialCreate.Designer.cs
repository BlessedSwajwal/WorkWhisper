// <auto-generated />
using System;
using Infrastructure.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Infrastructure.Migrations
{
    [DbContext(typeof(WorkWhisperDbContext))]
    [Migration("20230930094837_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Domain.CompanySpace.CompanySpace", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Space", (string)null);
                });

            modelBuilder.Entity("Domain.Member.Member", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CompanySpaceId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Members", (string)null);
                });

            modelBuilder.Entity("Domain.Post.Post", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("PostId");

                    b.Property<string>("Body")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsEdited")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPrivate")
                        .HasColumnType("bit");

                    b.Property<Guid>("OwnerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("SpaceId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Posts", (string)null);
                });

            modelBuilder.Entity("Domain.CompanySpace.CompanySpace", b =>
                {
                    b.OwnsMany("Domain.Member.ValueObjects.MemberId", "Members", b1 =>
                        {
                            b1.Property<Guid>("SpaceId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<Guid>("Value")
                                .HasColumnType("uniqueidentifier");

                            b1.HasKey("SpaceId", "Value");

                            b1.ToTable("Space_Members");

                            b1.WithOwner()
                                .HasForeignKey("SpaceId");
                        });

                    b.OwnsMany("Domain.Post.ValueObjects.PostId", "PostIds", b1 =>
                        {
                            b1.Property<Guid>("SpaceId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<Guid>("Value")
                                .HasColumnType("uniqueidentifier");

                            b1.HasKey("SpaceId", "Value");

                            b1.ToTable("Space_PostIds");

                            b1.WithOwner()
                                .HasForeignKey("SpaceId");
                        });

                    b.Navigation("Members");

                    b.Navigation("PostIds");
                });

            modelBuilder.Entity("Domain.Member.Member", b =>
                {
                    b.OwnsMany("Domain.Post.ValueObjects.PostId", "PostIds", b1 =>
                        {
                            b1.Property<Guid>("MemberId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<Guid>("Value")
                                .HasColumnType("uniqueidentifier");

                            b1.HasKey("MemberId", "Value");

                            b1.ToTable("Members_PostIds");

                            b1.WithOwner()
                                .HasForeignKey("MemberId");
                        });

                    b.Navigation("PostIds");
                });

            modelBuilder.Entity("Domain.Post.Post", b =>
                {
                    b.OwnsMany("Domain.Post.Entity.Comment", "Comments", b1 =>
                        {
                            b1.Property<Guid>("Id")
                                .HasColumnType("uniqueidentifier")
                                .HasColumnName("CommentId");

                            b1.Property<Guid>("PostId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<Guid>("CommentorId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("Text")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("Id", "PostId");

                            b1.HasIndex("PostId");

                            b1.ToTable("Comment");

                            b1.WithOwner()
                                .HasForeignKey("PostId");

                            b1.OwnsMany("Domain.Member.ValueObjects.MemberId", "UpvotingMemberIds", b2 =>
                                {
                                    b2.Property<Guid>("Value")
                                        .HasColumnType("uniqueidentifier");

                                    b2.Property<Guid>("CommentId")
                                        .HasColumnType("uniqueidentifier");

                                    b2.Property<Guid>("PostId")
                                        .HasColumnType("uniqueidentifier");

                                    b2.HasKey("Value", "CommentId", "PostId");

                                    b2.HasIndex("CommentId", "PostId");

                                    b2.ToTable("Comment_UpvotingMemberIds");

                                    b2.WithOwner()
                                        .HasForeignKey("CommentId", "PostId");
                                });

                            b1.Navigation("UpvotingMemberIds");
                        });

                    b.OwnsMany("Domain.Member.ValueObjects.MemberId", "UpvotingMemberIds", b1 =>
                        {
                            b1.Property<Guid>("Value")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<Guid>("PostId")
                                .HasColumnType("uniqueidentifier");

                            b1.HasKey("Value", "PostId");

                            b1.HasIndex("PostId");

                            b1.ToTable("Posts_UpvotingMemberIds");

                            b1.WithOwner()
                                .HasForeignKey("PostId");
                        });

                    b.Navigation("Comments");

                    b.Navigation("UpvotingMemberIds");
                });
#pragma warning restore 612, 618
        }
    }
}
